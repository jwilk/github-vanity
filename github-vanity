#!/usr/bin/python3

# Copyright © 2013-2015 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import errno
import fcntl
import json
import operator
import os
import sys

import requests
import urllib3

prog = os.path.basename(sys.argv[0])

def create_cache_dir():
    path = os.getenv('XDG_CACHE_HOME')
    if not path.startswith('/'):
        path = os.path.join(os.path.expanduser('~'), '.cache')
    path = os.path.join(path, 'github-vanity')
    os.makedirs(path, 0o700, exist_ok=True)
    return path

def format_user_name(user):
    template = '<{login}>'
    if user.get('name') is not None:
        template = '{name} ' + template
    return template.format(**user)

class Dumper(object):

    def __init__(self):
        self.session = requests.Session()
        self.session.verify = True
        self.session.trust_env = False
        self.session.headers['User-Agent'] = 'github-vanity (https://github.com/jwilk/github-vanity)'
        self.cache_dir = create_cache_dir()
        self.cache_path = os.path.join(self.cache_dir, 'cache.json')
        self.cache = None
        self.lock_fd = None

    def __enter__(self):
        if self.lock_fd is not None:
            raise RuntimeError('{self!r} is already locked'.format(self=self))
        self.lock_fd = os.open(self.cache_dir, os.O_RDONLY)
        try:
            fcntl.flock(self.lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError as exc:
            if exc.errno == errno.EWOULDBLOCK:
                print('{prog}: waiting for the lock...'.format(prog=prog), end='', file=sys.stderr)
                sys.stderr.flush()
                fcntl.flock(self.lock_fd, fcntl.LOCK_EX)
                print('', file=sys.stderr)
            else:
                raise
        try:
            with open(self.cache_path, 'rt', encoding='UTF-8') as fp:
                self.cache = json.load(fp)
        except FileNotFoundError:
            self.cache = {}
        return self

    def __exit__(self, *exc_info):
        if self.lock_fd is None:
            return
        try:
            with open(self.cache_path + '.tmp', 'wt', encoding='UTF-8') as fp:
                json.dump(self.cache, fp)
            os.rename(self.cache_path + '.tmp', self.cache_path)
            self.cache = None
        finally:
            os.close(self.lock_fd)
            os.lock_fd = None

    def get(self, url):
        headers = {}
        try:
            cached = self.cache[url]
        except KeyError:
            pass
        else:
            headers['If-None-Match'] = cached['etag']
        response = self.session.get(url, headers=headers)
        if response.status_code == 304:
            return cached['data']
        result = response.json()
        try:
            if response.status_code >= 400:
                response.reason = result['message']
        finally:
            response.raise_for_status()
        try:
            etag = response.headers['ETag']
        except KeyError:
            pass
        else:
            self.cache[url] = dict(etag=etag, data=result)
        return result

    def get_user(self, login):
        url = 'https://api.github.com/users/{login}'.format(login=login)
        return self.get(url)

    def dump_followers(self, login):
        print('followers:')
        url = 'https://api.github.com/users/{login}/followers'.format(login=login)
        followers = self.get(url)
        followers = sorted(followers, key=operator.itemgetter('login'))
        for follower in followers:
            user = self.get_user(follower['login'])
            print('-', format_user_name(user))
        print()

    def dump_repositories(self, login):
        print('repositories:')
        print()
        url = 'https://api.github.com/users/{login}/repos'.format(login=login)
        repos = self.get(url)
        repos = sorted(repos, key=operator.itemgetter('name'))
        for repo in repos:
            url = repo['stargazers_url']
            followers = self.get(url)
            followers = [
                fw for fw in followers
                if fw['login'] != login
            ]
            if not followers:
                continue
            followers = sorted(followers, key=operator.itemgetter('login'))
            print('  {repo}:'.format(repo=repo['name']))
            for follower in followers:
                follower = self.get_user(follower['login'])
                print('   -', format_user_name(follower))
            print()

    def dump(self, login):
        self.dump_followers(login)
        self.dump_repositories(login)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('--debug', action='store_true')
    ap.add_argument('user', metavar='<user>')
    options = ap.parse_args()
    if int(requests.__version__.split('.')[0]) < 1:
        raise NotImplementedError('requests >= 1.0 is required')
    if options.debug:
        urllib3.add_stderr_logger()
    with Dumper() as dumper:
        dumper.dump(options.user)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
